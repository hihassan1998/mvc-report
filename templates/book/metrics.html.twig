{% extends 'base.html.twig' %}

{% block title %}
	Clean Code Analysis!
{% endblock %}

{% block body %}
	<main>
		<h1>Analys</h1>
		<div class="double-bottom">
			<h2>
				Badges:
			</h2>

		</div>
		<br>
		<div class="double-bottom">
			<h2>Introduktion</h2>
			<p>
				KOd kvalitet är avgörande för att skapa en underhållbar och skallbar applikation. De mest vanlig modell för att anlysera och utvardera kodkvalitet är de så kallad sex C:erna. Dessa är viktiga och avgörande mättal som hjälper till att bedöma hur clean och strukturerad koden är:
			</p>
			<li>
				<b>Codestyle:
				</b>
				Den är avgörande i ramen inom hur lättläst koden är och hur mucket koden är i anighet med indenterings och namngivnings principer. Bra kodstil gör koden mer underhållbart.
			</li>
			<li>
				<b>Coverage:
				</b>
				Mäter hur stor andel av koden som testas med automatiserade tester. Hög täckning minskar risken för buggar och gör det tryggare att göra förändringar.
			</li>
			<li>
				<b>Complexity:
				</b>
				Denna mättal avgör hur komplex koden är som innebär antal villkor eller loopar. Hög komplexitet tyder på svår lässt och svårt testbar kod.
			</li>
			<li>
				<b>Cohesion:
				</b>
				Denna mättal beskriver hur väl olika moduler eller klasser hör ihop. Hög 'cohesion' betyder att kllasen har ett stydligt ansvar
			</li>
			<li>
				<b>Coupling:
				</b>
				Denna mättal visar hur beroende olika delar av koden är av varandra, låg koppling är önskvärt.
			</li>
			<li>
				<b>CRAP  (Change Risk Analysis and Predictions):
				</b>
				Denna mättal bedömer risk för förandingar och kodens svårighet.
			</li>
		</div>
		<br>
		<div class="double-bottom">

			<h2>Phpmetrics</h2>
			<p>
				Vid analys av projektets kodkvalietet med hjäpl av PHP Metrics verktyg framkommer intressanta insiket som hjälper till att ideintifera flaskhalsar och förbättringsområden.
			</p>
			<li>
				<b>Kodstorlek och komplexitet:</b>Klassen App\Controller\DiceGameController är den mest omfattande med 105 LLOC (Lines of Logical Code) och en volym på 1526.06, vilket indikerar att den är stor och potentiellt svår att underhålla. Dessutom har denna klass en relativt låg kommentarvikt (31.42%), vilket tyder på att koden kan vara svår att förstå utan ytterligare kommentarer. Även ApiController och BookController är stora klasser som bör ses över för möjlig refaktorering och modularisering.
			</li>
			<li>
				<b>Koppling:</b>Samtliga kontrollerklasser (DiceGameController, ApiController, BookController med flera) har hög efferent coupling (mellan 4 och 9), vilket innebär att de är beroende av många andra klasser. Detta ger en hög instabilitet (instability = 1), vilket i sin tur kan leda till svårigheter vid ändringar eftersom många beroenden måste hanteras samtidigt. En klass med hög instabilitet är känslig för förändringar i andra delar av systemet, vilket ökar risken för buggar och underhållskostnader.
			</li>
			<li>
				<b>Kommentarvikt och intelligens i koden:</b>
				Klassen App\Card\CardGraphic har en hög volym (866.1) men låg kommentarvikt (14.96%), vilket kan innebära att komplex funktionalitet saknar tillräcklig dokumentation. Även Game21Service och CardGameController21 visar på relativt låga kommentarvikter i relation till sin storlek, vilket är en svag punkt för kodförståelse.
			</li>
		</div>
		<br>
		<div class="double-bottom">

			<h2>Scrutinizer</h2>
			<li>
				förklarar de sex C:na och hur de kan påverka kodens kvalitet.
			</li>
			<li>Exemplifiera, där det passar, med några mätvärden som är kopplad till din egen kod och ge en kort förklaring av mätvärdet relaterat till kodkvalitet.
			</li>

			<a href="https://scrutinizer-ci.com/g/hihassan1998/mvc-report/build-status/main" target="_blank" rel="noopener">
				<img src="https://scrutinizer-ci.com/g/hihassan1998/mvc-report/badges/build.png?b=main" alt="Build Status">
			</a>
			<a href="https://scrutinizer-ci.com/g/hihassan1998/mvc-report/badges/quality-score.png?b=main" target="_blank" rel="noopener">
				<img src="https://scrutinizer-ci.com/g/hihassan1998/mvc-report/badges/quality-score.png?b=main" alt="Strutinizer Status">
			</a>
			<a href="https://scrutinizer-ci.com/g/hihassan1998/mvc-report/badges/coverage.png?b=main" target="_blank" rel="noopener">
				<img src="https://scrutinizer-ci.com/g/hihassan1998/mvc-report/badges/coverage.png?b=main" alt="Coverage Status">
			</a>
		</div>
		<br>
		<div class="double-bottom">

			<h2>Förbättringar</h2>
			<li>
				JAg tykcer att jag ska fokusera på dessa områden som jag tycker kommer göra min kodbas bättre
								Kodtäckning kommer förbättras och från 33% har ökats till 90%.
								Mer enhets tester introducerat som har bidragit till bättre funktainalitet konroller opå applikation och minskar brytning av appliaktionen i drift och nedan kan des synnas hur coverage såg ut innan of efter förbättingar:
								
								Minska koppling: Sträva efter att minska beroenden i controller-klasserna för att öka kodens stabilitet och underlätta underhåll. Detta kan göras genom att använda designmönster som Dependency Injection och tydligare separering av ansvar.
								
								Öka kommentarvikten: Lägg till mer utförliga kommentarer i komplexa klasser som CardGraphic och Game21Service för att underlätta framtida underhåll och förståelse för andra utvecklare.
			</li>
		</div>
		<br>
		<div class="double-bottom">

			<h2>Diskussion</h2>
			<p>
				Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet?
																																											Finns det fördelar och kanske nackdelar?
																																											Ser du andra möjligheter att jobba mot “clean code”?
			</p>
		</div>
	</main>
{% endblock %}
