{% extends 'base.html.twig' %}

{% block title %}
	Clean Code Analysis!
{% endblock %}

{% block body %}
	<main>
			<h1>Analys</h1>
		<div>
			<h2>Introduktion</h2>
			<p>
				KOd kvalitet är avgörande för att skapa en underhållbar och skallbar applikation. De mest vanlig modell för att anlysera och utvardera kodkvalitet är de så kallad sex C:erna. Dessa är viktiga och avgörande mättal som hjälper till att bedöma hur clean och strukturerad koden är:
			</p>
			<ol>
			<li>
				<b>Codestyle: Den är avgörande i ramen inom hur lättläst koden är och hur mucket koden är i anighet med indenterings och namngivnings principer. Bra kodstil gör koden mer underhållbart.
				</b>
			</li>
			<li>
				<b>Coverage: </b> Mäter hur stor andel av koden som testas med automatiserade tester. Hög täckning minskar risken för buggar och gör det tryggare att göra förändringar.
			</li>
			<li>
				<b>Complexity: 
				</b> Denna mättal avgör hur komplex koden är som innebär antal villkor eller loopar. Hög komplexitet tyder på svår lässt och svårt testbar kod.
			</li>
			<li>
				<b>Cohesion:
				</b> Denna mättal beskriver hur väl olika moduler eller klasser hör ihop. Hög 'cohesion' betyder att kllasen har ett stydligt ansvar
			</li>
			<li>
				<b>Coupling
				</b>
			</li>
			<li>
				<b>CRAP
				</b>
			</li>
			</ol>
	</div>
	<div>
		<h2>Phpmetrics</h2>
		<ul>
			<li>
				förklarar de sex C:na och hur de kan påverka kodens kvalitet.
			</li>
			<li>Exemplifiera, där det passar, med några mätvärden som är kopplad till din egen kod och ge en kort förklaring av mätvärdet relaterat till kodkvalitet.
			</li>
		</ul>
	</div>
	<div>
		<h2>Scrutinizer</h2>
		<ul>
			<li>
				förklarar de sex C:na och hur de kan påverka kodens kvalitet.
			</li>
			<li>Exemplifiera, där det passar, med några mätvärden som är kopplad till din egen kod och ge en kort förklaring av mätvärdet relaterat till kodkvalitet.
			</li>
		</ul>
	</div>
	<div>
		<h2>Förbättringar</h2>
		<ul>
			<li>
				Exempel på förbättringar kan vara:
														
														Fixa issues
														Öka kodtäckning
														Fokusera på kvalitetsindex i Scrutinizer
														Minska komplexiteten i class/metod
			</li>
			<li>Börja med att skriva om förbättringarna, vad du tänker göra, varför du väljer dem och hur du tror det kommer påverka mätvärdena för kvalitet.</li>
			<li>Implementera sedan förbättringarna.</li>
			<li>Analysera därefter rapporterna från phpmetrics och Scrutinizer och notera de nya mätvärdena.</li>
			<li>Gör det tydligt hur mätvärdena såg ut innan och efter dina förbättringar.</li>
		</ul>
	</div>
	<div>
		<h2>Diskussion</h2>
		<p>
			Kan man aktivt jobba med kodkvalitet och “clean code” på detta sättet?
							Finns det fördelar och kanske nackdelar?
							Ser du andra möjligheter att jobba mot “clean code”?
		</p>
	</div>
</main>{% endblock %}
